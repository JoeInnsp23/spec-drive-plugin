# CI & Quality Gates

**Project:** {{PROJECT_NAME}}
**Last Updated:** {{DATE}}

## Continuous Integration

### CI Platform

- **Platform:** GitHub Actions / GitLab CI / Jenkins
- **Configuration:** `.github/workflows/` or `.gitlab-ci.yml`

### CI Pipeline

```yaml
Pipeline Stages:
  1. Lint & Format Check
  2. Type Check
  3. Unit Tests
  4. Integration Tests
  5. Build
  6. Security Scan
  7. Deploy (on main branch)
```

### Pipeline Triggers

- **Pull Request:** Runs all checks
- **Main Branch:** Runs all checks + deployment
- **Tags:** Runs all checks + release

## Quality Gates

### Required Checks (Block Merge)

- [ ] Linter passes
- [ ] Type check passes
- [ ] Unit tests pass (>= 80% coverage)
- [ ] Integration tests pass
- [ ] Build succeeds
- [ ] No high/critical vulnerabilities
- [ ] At least 1 approval

### Recommended Checks (Non-blocking)

- Code coverage >= 90%
- Performance benchmarks pass
- Documentation updated

## Code Quality

### Linting

```bash
# Run linter
# TODO: Add lint command

# Auto-fix issues
# TODO: Add lint fix command
```

**Configuration:** `.eslintrc` / `pyproject.toml` / etc.

### Formatting

```bash
# Check formatting
# TODO: Add format check command

# Auto-format
# TODO: Add format command
```

**Configuration:** `.prettierrc` / `black.toml` / etc.

### Type Checking

```bash
# Run type checker
# TODO: Add type-check command
```

**Configuration:** `tsconfig.json` / `mypy.ini` / etc.

## Security Scanning

### Dependency Scanning

```bash
# Scan dependencies for vulnerabilities
npm audit
# or: pip-audit, cargo audit, etc.
```

### SAST (Static Analysis)

- Tool: Semgrep / SonarQube / CodeQL
- Runs on every pull request

## Test Coverage

### Coverage Requirements

- **Minimum:** 80% line coverage
- **Target:** 90% line coverage
- **Critical paths:** 100% coverage

### Coverage Report

```bash
# Generate coverage report
# TODO: Add coverage command

# View report: coverage/index.html
```

---

ðŸ¤– Generated by spec-drive
